#include <iostream>
#include <cmath>
 
using namespace std;
 
 
double simpson(double(*f)(double), double a, double b)
{
    double result = (b - a) / 6;
    result *= f(a) + 4 * f((a + b) / 2) + f(b);
    return result;
}
 
double f(double x)
{
    return 1 / x;
}
 
double my_ln(double x)
{
    if (x == 1)
        return 0;
    if (x <= 0)
        return NAN;
    double result = 0;
    double step = (x - 1) / 100;
    for (double a = 1; a < x; a += step)
        result += simpson(f, a, a + step);
    return result;
}
 
double my_pow(double a, double b, double epsilon)
{
    double result = 1, tmp = 1;
    double m = b * my_ln(a);
    for (int i = 1; abs(tmp) >= epsilon; i++)
    {
        tmp *= m / i;
        result += tmp;
    }
    return result;
}
 
int main()
{
    cout << my_ln(15) << endl;
    cout << my_pow(2, 3, 0.001) << endl;
}
просто убираем экспоненту. По формуле https://www.cyberforum.ru/cgi-bin/latex.cgi?
a^x = \sum  \frac{x^n log^n(a)}{n!}.
Соответственно, чуть покороче и попроще. Логарифм тут тоже считается с помощью определенного интеграла через формулу Симпсона (мы помним, что интеграл от 1/x это ln|x|, поэтому интегрируя 1/x можно получить значение логарифма). Другого способа найти логарифм от произвольного числа я не нашел (ряд разлагается только для x от 0 (не включая) до двух. Дальше он расходится.






#include <iostream>
#include <cmath>
 
using namespace std;
 
 
double simpson(double(*f)(double), double a, double b)
{
    double result = (b - a) / 6;
    result *= f(a) + 4 * f((a + b) / 2) + f(b);
    return result;
}
 
double f(double x)
{
    return 1 / x;
}
 
double my_ln(double x)
{
    if (x == 1)
        return 0;
    if (x <= 0)
        return NAN;
    double result = 0;
    double step = (x - 1) / 100;
    for (double a = 1; a < x; a += step)
        result += simpson(f, a, a + step);
    return result;
}
 
double my_exp(double x, double epsilon)
{
    double result = 1;
    double m = x;
    for (int i = 2; abs(m) >= epsilon; i++)
    {
        result += m;
        m *= x / i;
    }
    return result;
}
 
double my_pow(double a, double b, double epsilon)
{
    if (b < 0)
        return my_pow(1 / a, -b, epsilon);
    int div = (int)b;
    double integerPart = 1;
    for (int i = 0; i < div; i++)
        integerPart *= a;
    return integerPart * my_exp((b - div) * my_ln(a), epsilon);
}
 
int main()
{   
    cout << my_ln(15) << endl;
    cout << my_exp(3, 0.001) << endl;
    cout << my_pow(2, 3, 0.001) << endl;
}
