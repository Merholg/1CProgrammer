
//#include <stdio.h>
//typedef struct {
//    double b;
//    double pow;
//} pow_t;
//double sqrt(double a) {
//    double low = 0;
//    double high = (a < 1) ? 1 : a;
//    for (; ; ) {
//        double middle = (low + high) / 2;
//        if (middle * middle <= a) {
//            if (middle == low) {
//                return middle;
//            }
//            low = middle;
//        } else {
//            if (middle == high) {
//                return middle;
//            }
//            high = middle;
//        }
//    }
//}
Function SquareRealNumber(Знач a)
	
	low = 0;
	high = ?(a < 1, 1, a);
    While True Do
		middle = Round((low + high) / 2, 15);
		If (middle * middle) <= a Then
			If middle = low Then
				Return middle;
			EndIf;
        	low = middle;
		Else
			If middle = high Then
				Return middle;
			EndIf;
        	high = middle;
		EndIf;
	EndDo;
EndFunction

//void pow_integer(pow_t *p, double a, double b) {
//    if (b <= p->b) {
//        pow_integer(p, a * a, 2 * b);
//    }
//    if (b <= p->b) {
//        p->b -= b;
//        p->pow *= a;
//    }
//}
Procedure PowInteger(p, Знач a, Знач b)
	If b <= p.b Then
		PowInteger(p, a * a, b * 2);
	EndIf;
	If b <= p.b Then
		p.b = p.b - b;
		p.pow = p.pow * a;
	EndIf;
EndProcedure

//void pow_fractional(pow_t *p, double a, double b) {
//    while (p->b > 0) {
//        if (b <= p->b) {
//            p->b -= b;
//            p->pow *= a;
//        }
//        a = sqrt(a);
//        b /= 2;
//    }
//}
Procedure PowFractional(p, Знач a, Знач b)
	While Round(p.b, 15) > 0 Do
		If b <= p.b Then
			p.b = p.b - b;
			p.pow = p.pow * a;
		EndIf;
		a = SquareRealNumber(a);
		b = b / 2;
	EndDo;
EndProcedure

//double pow(double a, double b) {
//    pow_t p = {b, 1};
//    pow_integer(&p, a, 1);
//    pow_fractional(&p, a, 1);
//    return p.pow;
//}
Function PowerRealNumber(Знач a, Знач b)
	pow_t = Новый Структура("b, pow", b, 1);
	PowInteger(pow_t, a, 1);
	PowFractional(pow_t, a, 1);
	Return pow_t.pow;
EndFunction

//int main() {
//    double b = 6.7, e = 2.7;
//    printf("%lf\n", pow(b, e));
//}

Процедура ПриНачалеРаботыСистемы()
	// Вставить содержимое обработчика.
	Сообщить(Round(PowerRealNumber(6.7, 2.7), 12));
	Сообщить(Pow(6.7, 2.7));
	// при значении аргументов 6.7 ** 2.7 вывод 169,981621311176 и 169,981621311173
КонецПроцедуры
